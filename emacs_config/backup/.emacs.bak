;;; package --- summary
;;; Commentary:
;;;;;;;;;;;; Code:

;;;;;;;; General

(setq c-basic-offset 4)       ;; indents 4 chars
(setq tab-width 4)            ;; and 4 char wide for TAB
(setq-default indent-tabs-mode nil) ;; force use of spaces
(global-font-lock-mode 1)     ;; syntax highlighting
(require 'linum)
(global-linum-mode 1)         ;; line numbers
(electric-pair-mode)          ;; auto closing brackets
;; (setq debug-on-error t)       ;; debugging
(fset 'yes-or-no-p 'y-or-n-p) ;; change yes or no to y or n
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

;; Key bindings (my personal preference)
(global-set-key (kbd "C-S-p") 'beginning-of-buffer) ;; top of file
(global-set-key (kbd "C-S-n") 'end-of-buffer) ;; end of file
(global-set-key (kbd "C-x C-a") 'move-beginning-of-line) ;; beginning of line
(global-set-key (kbd "C-a") 'back-to-indentation) ;; beginning of first word
(global-set-key (kbd "<f5>") 'revert-buffer) ;; allow window reload using F5
(global-set-key (kbd "C-`") 'better-shell-shell)
(global-set-key (kbd "C-;") 'better-shell-remote-open)
(global-set-key (kbd "s-r") 'compile)
(global-set-key (kbd "C-c C-e") 'eval-buffer) ;; reload

;;;;;;;; General End

;;;;;;;; Packages

(require 'package) ;; enables the ability to install packages
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/")t)
(package-initialize)

;;;;;;;; Packages End

;;;;;;;; Convinience Packages

;;;; Auto complete
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

;; Yasnippet
(require 'yasnippet)
(yas-global-mode 1)

;; Iedit mode
(define-key global-map (kbd "C-c c") 'iedit-mode)

;; Magit (Git control for emacs)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)

;; Flycheck
(require 'flycheck)
(global-flycheck-mode)

;; Neotree for easy directory navigation
(require 'neotree)
(global-set-key (kbd "C-c C-t")  'neotree-toggle)
;; controls :
;; n (next) p(prev)
;; SPC RET or TAB : open file or fold/unfold dir
;; g : refresh
;; A : maximize or minimize tree
;; H : toggle display hidden files
;; C-c C-n : create file or directory
;; C-c C-d : delete
;; C-c C-r : rename
;; C-c C-c : change root

;; Treemacs
;(require 'treemacs)

;; Ranger
(require 'ranger)
;; (ranger-mode) actual  ranger
(ranger-override-dired-mode t) ;; minimal ranger mode

;; Ivy, Swiper & Counsel
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

;; Projectile-mode s stands for command on MacOS, windows button for Windows
(require 'projectile)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "s-d") 'projectile-find-dir)
(define-key projectile-mode-map (kbd "s-f") 'projectile-find-file)
(define-key projectile-mode-map (kbd "s-g") 'projectile-grep)
(projectile-mode +1)
(setq projectile-completion-system 'ivy) ;; enable counsel-projectile

;; Dump-jump (jump to definition)
(require 'dumb-jump)
(dumb-jump-mode)
;; dumb-jump-go C-M-g core functionality. Attempts to jump to the definition for the thing under point
;; dumb-jump-back C-M-p jumps back to where you were when you jumped.
;; dumb-jump-quick-look C-M-q like dumb-jump-go but only shows tooltip with file, line, and context

;; ace-window
(require 'ace-window)
(global-set-key (kbd "M-o") 'ace-window)
(setq aw-background nil) ;; turn off background
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))


;;;;;;;; BONUS

;;;; Which-key
(which-key-setup-side-window-bottom)

;;;; Telephone line
(require 'telephone-line)

(setq telephone-line-primary-right-separator 'telephone-line-abs-left
      telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left)
(setq telephone-line-height 24
      telephone-line-evil-use-short-tag t)


(setq telephone-line-lhs
        '((evil   . (telephone-line-evil-tag-segment))
          (accent . (telephone-line-vc-segment
                     telephone-line-erc-modified-channels-segment
                     telephone-line-process-segment))
          (nil    . (telephone-line-minor-mode-segment
                     telephone-line-buffer-segment))))
(setq telephone-line-rhs
        '((nil    . (telephone-line-misc-info-segment))
          (accent . (telephone-line-major-mode-segment))
          (evil   . (telephone-line-airline-position-segment))))
(telephone-line-mode 1)

;;;; Beacon
(require 'beacon)
(beacon-mode 1)

;;;; Avy

;; go to the selected character
(global-set-key (kbd "C-:") 'avy-goto-char)
(global-set-key (kbd "C-'") 'avy-goto-char-2)

;; Go to Line
(global-set-key (kbd "M-g f") 'avy-goto-line)

;; Go to word
(global-set-key (kbd "M-g w") 'avy-goto-word-1)
(global-set-key (kbd "M-g e") 'avy-goto-word-0)

;;;; DashBoard
(require 'dashboard)
(dashboard-setup-startup-hook)
;; Set the title
(setq dashboard-banner-logo-title "The Marinov Emacs ;)")
;; Set the banner
(setq dashboard-startup-banner 'logo)
(setq dashboard-items '((recents  . 5)
                        (projects . 5)))

;;;;;;;; Convinience end

;;;;;;;; Org

;; Autocomplete
(require 'org-ac)
(org-ac/config-default)
(add-to-list 'ac-modes 'org-mode)

;; Bullets
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;;;;;;;; Org end

;;;;;;;; C++

;; Enable modern C++ font lock
(require 'modern-cpp-font-lock)
(modern-c++-font-lock-global-mode t)

;; Clang-format
(require 'clang-format)
(global-set-key (kbd "C-c u") 'clang-format-region)
(global-set-key (kbd "C-c f") 'clang-format-buffer)
(setq clang-format-style-option ".clang-format") ;; another option is llvm
;(add-hook 'c++-mode-hook 'clang-format) ;; this gives issues for some reason

;; C++ intellisense

;; Company
(require 'company)
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 3)

;; Company-irony
(require 'company-irony)
(add-to-list 'company-backends 'company-irony)

;; C headers auto completion with irony
(require 'company-irony-c-headers)
(eval-after-load 'company
  '(add-to-list
    'company-backends '(company-irony-c-headers company-irony)))

;; Enable irony mode for C/C++/Objective-C
(require 'irony)
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
;; Irony-eldoc
(add-hook 'irony-mode-hook #'irony-eldoc)

;; initiate company mode when opening/creating C/C++ files
(with-eval-after-load 'company
  (add-hook 'c++-mode-hook 'company-mode)
  (add-hook 'c-mode-hook 'company-mode))

;; c++ flycheck intelligent linter for c++

;; Set language standard
(add-hook 'c++-mode-hook
          (lambda () (setq flycheck-clang-language-standard "c++14")))

;; Flycheck-irony
(require 'flycheck-irony)
(with-eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)
  (setq irony--compile-options
      '("-std=c++14"        ;; general
        "-stdlib=libc++"))) ;; for mac only

;; ggtags (need to make these work)
(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
              (ggtags-mode 1))))

;;;;;;;; End of C++

;;;;;;;; Python

;;;; Elpy powerful python integrated environment
(setq visible-bell t)
(require 'elpy)
(require 'package)
(require 'json)
(package-initialize)
(elpy-enable)
;; fixing bug in elpy
(define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand)

;;;; jedi python intelisense
(require 'jedi)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

;;;;;;;;;;;; Python end

;;;;;;;; JavaScript

;; js2-mode
(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

;; Better imenu
(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
;; refactor and xref
(require 'js2-refactor)
(require 'xref-js2)

(add-hook 'js2-mode-hook #'js2-refactor-mode)
(js2r-add-keybindings-with-prefix "C-c C-r")
(define-key js2-mode-map (kbd "C-k") #'js2r-kill)

;; company for js
(require 'company-tern)

(add-to-list 'company-backends 'company-tern)
(add-hook 'js2-mode-hook (lambda ()
                           (tern-mode)
                           (company-mode)))
                           
;; Disable completion keybindings, as we use xref-js2 instead
(define-key tern-mode-keymap (kbd "M-.") nil)
(define-key tern-mode-keymap (kbd "M-,") nil)

;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
;; unbind it.
(define-key js-mode-map (kbd "M-.") nil)

(add-hook 'js2-mode-hook (lambda ()
			   (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))

;;;;;;;;;;;; JavaScript end

;;;;;;;;;;;;  Web-Development (html/css)

;; Web Mode
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))

;;csswatcher (uncomment only if you've installed csswatcher and really need it)
;(require 'ac-html-csswatcher)
;(ac-html-csswatcher-setup)

;; Indentation
(setq web-mode-markup-indent-offset 4)
(setq web-mode-code-indent-offset 4)
(setq web-mode-css-indent-offset 4)

;; Auto-closing
(setq web-mode-enable-auto-closing t)
(setq web-mode-enable-auto-quoting t)

;; Highlighting
(setq web-mode-enable-current-column-highlight t)
(setq web-mode-enable-current-element-highlight t)

;; Company auto-completion
(require 'company-web-html)
(defun my-web-mode-hook ()
  "Company auto-complete."
  (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files))
  )
(add-hook 'web-mode-hook  'my-web-mode-hook)

;; Emmet
(require 'emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.

;; Es-lint for javascript
(flycheck-add-mode 'javascript-eslint 'web-mode)

(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

;; use eslint with web-mode for jsx files
(flycheck-add-mode 'javascript-eslint 'web-mode)
(flycheck-add-mode 'javascript-eslint 'javascript-mode)

;;;; End of Web-Development


;;;; Bolean logic Open Source

  (autoload 'latex-math-preview-expression "latex-math-preview" nil t)
  (autoload 'latex-math-preview-insert-symbol "latex-math-preview" nil t)
  (autoload 'latex-math-preview-save-image-file "latex-math-preview" nil t)
  (autoload 'latex-math-preview-beamer-frame "latex-math-preview" nil t)


  ;; --------------- begin latex preview configuration ----------------- ;;
  ;; latex and auxtex layers needed
  ;; activate using the vim-like binding `[space] , p b`

  ;; automatically inserts newline at the end of long lines
;;  (add-hook 'text-mode-hook 'turn-on-auto-fill)

;;  (setq TeX-auto-save t)
;;  (setq TeX-parse-self t)
;;  (setq TeX-save-query nil)
 
;;  (load "auctex.el" nil t t)
;;  (load "preview-latex.el" nil t t)
;;  (require 'flymake)
;;  (defun flymake-get-tex-args (file-name)
;;    (list "pdflatex"
;;          (list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))
;;  (add-hook 'LaTeX-mode-hook 'flymake-mode)

 ;; enables preview of pictures
;;  (eval-after-load "preview"
 ;;   '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t)
;;  )
  ;; --------------- end latex preview configuration ----------------- ;;



(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 200 :width normal :foundry "nil" :family "Hack")))))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cursor-type (quote bar))
 '(custom-enabled-themes (quote (base16-ocean)))
 '(custom-safe-themes
   (quote
    ("fee4e306d9070a55dce4d8e9d92d28bd9efe92625d2ba9d4d654fc9cd8113b7f" "50d07ab55e2b5322b2a8b13bc15ddf76d7f5985268833762c500a90e2a09e7aa" "4feee83c4fbbe8b827650d0f9af4ba7da903a5d117d849a3ccee88262805f40d" "6daa09c8c2c68de3ff1b83694115231faa7e650fdbb668bc76275f0f2ce2a437" "12bacee81d067acf07dec4c867be541a04744a6ac6a39636de25a2c77e9b573c" "0c3b1358ea01895e56d1c0193f72559449462e5952bded28c81a8e09b53f103f" "5a7830712d709a4fc128a7998b7fa963f37e960fd2e8aa75c76f692b36e6cf3c" "78c1c89192e172436dbf892bd90562bc89e2cc3811b5f9506226e735a953a9c6" "fede08d0f23fc0612a8354e0cf800c9ecae47ec8f32c5f29da841fe090dfc450" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" "3da031b25828b115c6b50bb92a117f5c0bbd3d9d0e9ba5af3cd2cb9db80db1c2" "fd3c7bd752f48dcb7efa5f852ef858c425b1c397b73851ff8816c0580eab92f1" "595617a3c537447aa7e76ce05c8d43146a995296ea083211225e7efc069c598f" "f9f2ea69700b0c660f1a6507bbd0aec13e213b7618336ff20852f617991ae369" "bc4c89a7b91cfbd3e28b2a8e9e6750079a985237b960384f158515d32c7f0490" "a622aaf6377fe1cd14e4298497b7b2cae2efc9e0ce362dade3a58c16c89e089c" "e2fd81495089dc09d14a88f29dfdff7645f213e2c03650ac2dd275de52a513de" "2a9039b093df61e4517302f40ebaf2d3e95215cb2f9684c8c1a446659ee226b9" "08ef1356470a9d3bf363ffab0705d90f8a492796e9db489936de4bde6a4fdb19" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "7f89ec3c988c398b88f7304a75ed225eaac64efa8df3638c815acc563dfd3b55" default)))
 '(inhibit-startup-screen t)
 '(package-selected-packages
   (quote
    (which-key ggtags cider dashboard beacon telephone-line ranger gruvbox-theme latex-math-preview swiper-helm better-shell org-ac tabbar zerodark-theme yasnippet-snippets xref-js2 web-mode virtualenvwrapper virtualenv treemacs spacemacs-theme seti-theme rtags python-mode pylint org-bullets org omnisharp oceanic-theme neotree modern-cpp-font-lock magit js2-refactor jedi irony-eldoc iedit google-c-style flymake-jslint flymake-jshint flymake-cursor flycheck-irony flycheck-clang-analyzer emmet-mode elpy dumb-jump counsel-projectile company-web company-tern company-irony-c-headers company-irony clang-format bind-key base16-theme auto-complete-clang auto-complete-c-headers ac-js2 ac-html-csswatcher ac-html)))
 '(pdf-view-midnight-colors (quote ("#fdf4c1" . "#282828"))))
(put 'set-goal-column 'disabled nil)

